בס"ד


1)                                   oop2 - פרוייקט: סופר מריו

2)  אליהו איתן      ת.ז. 204231732
    אשר פישר        ת.ז. 201514841
	יוסף ווינשטוק   ת.ז. 203172028

3)  בפרוייקט זה פיתחנו את המשחק סופר מריו. אנו משתמשים בספריה הגרפית sfml, משלבים גם סאונדים, פונטים, אנימציות וכו.
    את האנימציות יצרנו וניהלנו באמצעות קבצי xml. את השלבים ערכנו באמצעות התוכנה Tiled אשר מייצרת קבצי tmx.
    למשתמש ישנה אפשרות לנוע באמצעות החיצים ימינה ושמאלה או לקפוץ, כאשר מטרתו היא להגיע אל הדלת ובכך לעבור שלב.
    ישנם אוייבים מסוג צב וגומבה אשר ניתן להרוג באמצעות קפיצה עליהם. על הצב יש לקפוץ פעמיים.
    ניתן כמובן גם לאסוף נקודות באמצעות נגיחה מלמטה בקופסאות המטבעות.
    מימשנו שלושה שלבים וניהלנו את קריאת השלבים בצורה יעילה כך שניתן להוסיף כמובן שלבים והתכנית תעבוד כהלכה.	

4)  תיכון:
  
          סופר מריו מורכב בעיקר מדמויות קבועות (קירות, אריחי מטבע, וכו) ומדמויות נעות(צב, גומבה, מעלית, וכו).
		  בשל כך התיכון הוא כזה: 
		  קיימת מחלקת gameObject אבסטרקטית עליונה אשר ממנה יורשים המחלקות "static object" וכן "active object".
		  ממחלקת "static object" יורשים: Tile, nonGround, door. המחלקה tile גם מורישה לשלוש סוגי tiles.
		  ממחלקת "active object" יורשים coin, enemy, mario. המחלקה enemy מורישה גם היא לאויבים שונים.   
		  המחלקות העליונות אשר מהוות אך ורק בסיס משותף למחלקות היורשות מהן הינן אבסטרקטיות ומכילות פונקציות "draw", "move" 
		  אשר הינן "pure abstract".
		  באשר לפונקציות ה "draw", "move", כמובן שהינן וירטואליות ועובדות באמצעות פולימורפיזם.
		  את ניהול ההתנגשויות ביצענו באמצעות השגרה multy mehods אשר משתמשת בין היתר ב lookup table על מנת לקרוא לפונקציה 
		  הנכונה בכל מקרה.
		  כדי לשלוט בשחקן באמצעות המקשים ולתמוך באפשרות להתאים את האנימציות כראוי אנו משתמשים ב enum אשר משקף את מצבו 
		  של השחקן - onGrounf, falling וכו. המצב הדיפולטיבי של השחקן הוא במצב falling ובכך אנו מדמים מצב של 
		  גרוויטציה.
		  טעינת השלבים מתבצעת מתוך קובץ tmx ועל כן על מנת להריץ את התכנית יש להתקין את התכנה tiled או לתמוך 
		  בקבצי tmx בצורה כלשהי.
		  
          באופן כללי המשחק מתנהל בצורה הבאה:
		  בלולאה נקראת פונקציית ה "draw" על ידי פולימופיזם כך שכל אובייקט יצוייר באופן הנכון. לאחר מכן בלולאה נקראת פונקציית 
          ה "move" וגם כאן באמצעות פולימורפיזם ואז נבדקים ה "collides" ואנו פועלים בהתאם.  
		  

5)         הקבצים בפרוייקט:

           gameObject: מחלקת העל ממנה מסתעפים רוב הדמויות שבמשחק. אבסטרקטית.
           active object: יורשת מ "object" ומורישה לכמה מחלקות. אבסטרקטית. מכילה draw ו move פולימורפים.
	       static object: יורשת מ "object" ומורישה לכמה מחלקות. אבסטרקטית. מכילה draw ו move פולימורפים.
	       mario: המחלקה האחראית על התזוזות לפי החיצים ועל מריו עצמו.
	       board: מנהלת את הדפסות האובייקטים וכן את האנימציות. גם את ההדפסות של אובייקטים שמתו וכו'.
           coin:  מחלקה המייצגת את המטבע היוצא מהקופסה.
	       coinTile: אחראית לאריח שמכיל מטבעות. מספר המטבעות:rand()%6. 
           collition: המחלקה אחראית על כל הפונקציות של כל ההתנגשויות בין כל 2 עצמים במשחק.
           controller:  מנהל את המשחק על ידי קריאה ל run והתגלגלות משם והלאה. 
           door:  אחראית ל door  שבאמצעות התנגשות איתו עולים לשלב הבא.
           elevator: מעלית. יורשת מ active object ומנהלת move עצמאית מבוססת שעון. 
           score: אחראי על ניהול הניקוד של השחקן.  הוספנו גם אפשרות לקבוע high score אפילו בהרצות שונות של המשחק(עשינו זאת באמצעות עבודה עם קבצים).
		   sound: אחראי על ניהול הסאונדים במשחק.
		   enemy: מחלקת העל של האוייבים. מורישה ל turtle ול Gumba. מכילה move בסיסי.
 		   fileReader: משמשת בעיקר לקריאה מקבצים כדי לבדוק מהו הניקוד המירבי שהושג עד כה ואם נקבע שיא חדש.
           gameButton:	אחראית על כפתורים מתוך התפריט - לצייר, לבדוק אם נלחץ וכו.
		   "best.txt": קובץ טקסט המיועד להציג מהו ה high score במשחק זה עד כה.
		   gumba:  אוייב של מריו. מנהל פונקציית move ומשנה כיוון כאשר נתקע.
		   infoBar:  אחראית למידע המודפס בחלון לגבי החיים שנותרו, הניקוד וכו'.
		   level:   זוהי מחלקה שנבנתה כדי לעבוד עם קבצי tmx ולטעון אובייקטים מהתכנה tiled.
		   message: אחראית להדפסות על מצבים שונים במשחק כגון ניצחון הפסד וכן.
		   menu:  אחראית על התפריט בכניסה למשחק. מציעה: help, credits, exit, play
		   nonGround:  אחראית כביכול לסיים את הנפילה של מריו כלומר ברגע שהוא נוגע באובייקט שלה הוא נפסל.
		   removableTile:  יורש מ tile. זהו האריח אותו מריו יכול לפוצץ כאשר נוגח בו מלמטה
		   solidTile: יורש מ tile. זהו האריח המשמש לרצפה ולחסום עצמים נעים. לא ניתן להסיר אותו.
		   source: תפקידו היחידי הוא לקרוא לפונקציית run של controller.
		   Tile:  מחלקת הבסיס המורישה לשלושת סוגי האריחים.
		   tinystr:  קובץ שנועד לעבוד עם גרפיקות ואנימציות.
		   tinyxmlerror: קובץ שנועד לעבוד עם גרפיקות ואנימציות.
		   turtle:  אוייב של מריו. מנהל פונקציית move ומשנה כיוון כאשר נתקע.
		   utillities: פונקציות עזר. בעיקר לבדוק מאיזה כיוון קרתה התנגשות.
		   animation:  קובץ hpp  שנועד לטפל באנימציות כלומר להחליף פריימים וכו.
		   constants:  קובץ h שנועד לשמור את "מספרי הקסם" שבתכנית ולשמור על הקוד נקי ככל שניתן. 
		   מכיל מספר מרחבי שמות : paths, sizes וכו.
		   

6)   מבני נתונים עקריים:
         ווקטור של "active oject" ווקטור של "static object"
         
         

7)     אין אלגוריתמים הראויים לציון באופן מיוחד. 

8)   בפיצ'ר המעלית, בשל העובדה כי המעלית נעה למעלה ולמטה ובשל הצורה בה בנינו את התכנית,
     מריו אינו נח בצורה טובה על המעלית אלא נראה רועד. ניתן כמובן להסיר את האובייקט מעלית 
	 מקובץ ה tmx.

9)    שימו לב:
        אם ברצונכם לסיים שלב במהירות, אין צורך לעבור את כל השלב!
         יצרנו דלת בלתי נראית שדרכה ניתן לעבור לשלב הבא. 
         כדי להגיע אליה יש ללכת שמאלה בתחילת השלב עד שכבר אי אפשר ואז לקפוץ. בכך תעברו לשלב הבא.

       יצרנו גם אפשרות לקבוע שיאים אף בהרצות שונות באמצעות עבודה עם קבצים. בעת קביעת שיא חדש 
       תקבלו הודעה על כך.

10)  בדיקה נעימה


להלן קישור לסרטון שהעלנו ליוטיוב ובו הרצת המשחק  
https://youtu.be/HshN2wJYvoQ
        
           


 
      